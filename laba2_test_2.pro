/*
У каждого из 5 ребят (А, Б, В, Г, Д) на лбу наклеен либо белый, либо черный кружок; каждый видит,
каков кружок на лбу любого из остальных, но не знает цвета своего кружка. Известно, что ребята,
отмеченные белым кружком, всегда говорят правду, черным – всегда лгут. Говорят они следующее:

  А: «я вижу 3 белых кружка и 1 черный»,
  Б: «я вижу 4 черных кружка»,
  В: « я вижу 1 белый кружок и 3 черных»,
  Д: «я вижу 4 белых кружка».
Какого цвета кружок у каждого?      */

DOMAINS
  ребенок = ребенок(имя, цвет_наклейки)

  имя = symbol
  цвет_наклейки = symbol
  количество_наклеек =  integer
  
  число_видимых_наклеек = число_видимых_наклеек(количество_наклеек, количество_наклеек)
  
% Всевозможные ребята - гипотеза
  ребята = ребенок*
  имена = имя*
PREDICATES
% Вспомогательные предикаты для работы со списками
  nondeterm входит_в(ребенок, ребята)
  nondeterm входит_в(имя, имена)
  nondeterm длина_списка(имена, integer)
  
% Предикаты для перечисления возможных значений домеинов
  nondeterm возможный_цвет(цвет_наклейки)
  nondeterm возможное_имя(имя)

  nondeterm генерация_гипотезы(ребята)
  
  nondeterm сказал(имя, число_видимых_наклеек)
  
  nondeterm видит(имя, ребенок, ребята)
  nondeterm сколько_видит_кружков_цвета(имя, цвет_наклейки, ребята, integer)
  
  nondeterm проверка_высказывания(имя, ребята)
  nondeterm проверка_правдивости(имя, ребята)
  nondeterm проверка_высказываний(ребята)
  
  nondeterm поиск_решения(ребята)
CLAUSES
  входит_в(Элемент, [Элемент|_]).
  входит_в(Элемент, [_|ОстальныеЭлементы]):-
    входит_в(Элемент, ОстальныеЭлементы).

  длина_списка([], 0). % для завершения рекурсии
  длина_списка([_|Остальные], Длина):-
    длина_списка(Остальные, ДлинаОстальных),
    Длина = ДлинаОстальных + 1.

  возможный_цвет(Цвет):-
    Цвет = белый;
    Цвет = черный.
  возможное_имя(Имя):-
    Имя = а;
    Имя = б;
    Имя = в;
    Имя = г;
    Имя = д.
  
% Ребята - гипотеза
% Тут  она и генерируется
  генерация_гипотезы(Ребята):-
    
    возможный_цвет(Цвет_А), 
    возможный_цвет(Цвет_Б), 
    возможный_цвет(Цвет_В),
    возможный_цвет(Цвет_Г),
    возможный_цвет(Цвет_Д),
    Ребята = [
      ребенок(а, Цвет_А), 
      ребенок(б, Цвет_Б), 
      ребенок(в, Цвет_В), 
      ребенок(г, Цвет_Г), 
      ребенок(д, Цвет_Д)
    ].
    
  видит(Имя, ребенок(ДругоеИмя, Цвет), Ребята):-
    входит_в(ребенок(ДругоеИмя, Цвет), Ребята),
    ДругоеИмя >< Имя. % не видит сам себя
    
  сколько_видит_кружков_цвета(Имя, Цвет, Ребята, Сколько):-
    findall(ДругоеИмя, видит(Имя, ребенок(ДругоеИмя, Цвет), Ребята), Имена),
    длина_списка(Имена, Сколько).
  
  сказал(а, число_видимых_наклеек(3, 1)).
  сказал(б, число_видимых_наклеек(0, 4)).
  сказал(в, число_видимых_наклеек(1, 3)).
  сказал(д, число_видимых_наклеек(4, 0)).
   
  проверка_высказывания(Имя, Ребята):-
    сказал(Имя, число_видимых_наклеек(КоличествоБелых, КоличествоЧерных)),
    сколько_видит_кружков_цвета(Имя, белый, Ребята, КоличествоБелых),
    сколько_видит_кружков_цвета(Имя, черный, Ребята, КоличествоЧерных).
     
   % Высказывания белых - правда, а черных - ложь
   проверка_правдивости(Имя, Ребята):-
    % Если белый - правда
     входит_в(ребенок(Имя, белый), Ребята),
     проверка_высказывания(Имя, Ребята);
    % Если черный - лож
     входит_в(ребенок(Имя, черный), Ребята),
     NOT(проверка_высказывания(Имя, Ребята)).
     
   проверка_высказываний(Ребята):-
     проверка_правдивости(а, Ребята),
     проверка_правдивости(б, Ребята),
     проверка_правдивости(в, Ребята),
     проверка_правдивости(д, Ребята).
     
  % Проверка гипотезы
   поиск_решения(Ребята):-
    генерация_гипотезы(Ребята),
    проверка_высказываний(Ребята).
GOAL
  поиск_решения(Ребята_с_наклейками).
    



